# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions
# For more information about secrets see: https://docs.github.com/en/free-pro-team@latest/actions/reference/encrypted-secrets

name: crmsh CI

on: [push, pull_request]

env:
  DOCKER_SCRIPT: ./test/run-functional-tests
  GET_INDEX_OF: ./test/run-functional-tests _get_index_of
  FOLDER: /package
  PACKAGE_NAME: crmsh
  OBS_USER: ${{ secrets.OBS_USER }}
  OBS_PASS: ${{ secrets.OBS_PASS }}
  OBS_PROJECT: ${{ secrets.OBS_PROJECT }}
  TARGET_PROJECT: ${{ secrets.TARGET_PROJECT }}

jobs:
  general_check:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v3
    - name: check data-manifest
      run: |
        ./update-data-manifest.sh
        output=`git --no-pager diff data-manifest`
        [[ -z $output ]] || {
                echo "$output"
                echo "A new version of data-manifest is needed."
                echo "Please run ./update-data-manifest.sh && git add ./data-manifest in your local environment and push the code again."
                exit 1
        }

  unit_test:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        python-version: ['3.6', '3.8', '3.10']
      fail-fast: false
    timeout-minutes: 5
    if: ${{ false }}
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install tox
    - name: Test with pytest in tox
      run: |
        tox -v -e${{ matrix.python-version }}

  delivery:
    needs: [general_check,
      unit_test]
    runs-on: ubuntu-20.04
    timeout-minutes: 10
    steps:
    - uses: actions/checkout@v3
    - name: delivery process
      run: |
        echo "run"


  submit:
    needs: delivery
    runs-on: ubuntu-20.04
    timeout-minutes: 10
    if: ${{ false }}
    steps:
    - uses: actions/checkout@v3
    - name: submit process
      if: github.repository == 'ClusterLabs/crmsh' && github.ref == 'refs/heads/master' && github.event_name == 'push'
      run: |
        docker pull shap/continuous_deliver:latest
        docker run -t -v "$(pwd):/package" \
          -e OBS_USER=$OBS_USER \
          -e OBS_PASS=$OBS_PASS \
          -e OBS_PROJECT=$OBS_PROJECT \
          -e PACKAGE_NAME=$PACKAGE_NAME \
          -e TARGET_PROJECT=$TARGET_PROJECT \
          shap/continuous_deliver \
          /bin/bash -c "cd /package;/scripts/submit.sh"
